'use strict';Object.defineProperty(exports, "__esModule", { value: true });var _regenerator = require('babel-runtime/regenerator');var _regenerator2 = _interopRequireDefault(_regenerator);var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);var _extends2 = require('babel-runtime/helpers/extends');var _extends3 = _interopRequireDefault(_extends2);var _getPrototypeOf = require('babel-runtime/core-js/object/get-prototype-of');var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);var _createClass2 = require('babel-runtime/helpers/createClass');var _createClass3 = _interopRequireDefault(_createClass2);var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);var _inherits2 = require('babel-runtime/helpers/inherits');var _inherits3 = _interopRequireDefault(_inherits2);

var _interfaces = require('../../interfaces');
var _Numbers = require('../../utils/Numbers');var _Numbers2 = _interopRequireDefault(_Numbers);
var _IContract2 = require('../IContract');var _IContract3 = _interopRequireDefault(_IContract2);
var _ERC20Contract = require('../ERC20/ERC20Contract');var _ERC20Contract2 = _interopRequireDefault(_ERC20Contract);function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}


/**
                                                                                                                                                                                                                   * @typedef {Object} Network~Options
                                                                                                                                                                                                                   * @property {Boolean} test
                                                                                                                                                                                                                   * @property {Boolean} localtest ganache local blockchain
                                                                                                                                                                                                                   * @property {Web3Connection} [web3Connection=Web3Connection] created from params: 'test', 'localtest' and optional 'web3Connection' string and 'privateKey'
                                                                                                                                                                                                                   * @property {string} [contractAddress]
                                                                                                                                                                                                                   */

/**
                                                                                                                                                                                                                       * Network Object
                                                                                                                                                                                                                       * @class Network
                                                                                                                                                                                                                       * @param {Network~Options} options
                                                                                                                                                                                                                       */ /* eslint-disable no-underscore-dangle */ // eslint-disable-next-line no-unused-vars
var
Network = function (_IContract) {(0, _inherits3.default)(Network, _IContract);
  function Network(params) {(0, _classCallCheck3.default)(this, Network);var _this = (0, _possibleConstructorReturn3.default)(this, (Network.__proto__ || (0, _getPrototypeOf2.default)(Network)).call(this, (0, _extends3.default)({
      abi: _interfaces.network }, params)));_initialiseProps.call(_this);return _this;
  }


  /**
     * Asserts the 2 {@link ERC20Contract} on the current address
     * @function
     * @return {Promise<void>}
     * @throws {Error} Contract is not deployed, first deploy it and provide a contract address
     */(0, _createClass3.default)(Network, [{ key: 'getIssuesByAddress',

































    /**
                                                                          * Get Open Issues Available
                                                                          * @param {Address} address
                                                                          * @returns {number[]}
                                                                          */value: function () {var _ref = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee(
      address) {var res;return _regenerator2.default.wrap(function _callee$(_context) {while (1) {switch (_context.prev = _context.next) {case 0:_context.next = 2;return (
                  this.params.contract.
                  getContract().
                  methods.getIssuesByAddress(address).
                  call());case 2:res = _context.sent;return _context.abrupt('return',

                res.map(function (r) {return parseInt(r, 10);}));case 4:case 'end':return _context.stop();}}}, _callee, this);}));function getIssuesByAddress(_x) {return _ref.apply(this, arguments);}return getIssuesByAddress;}()


    /**
                                                                                                                                                                                                                                      * Get Amount of Issues Opened in the network
                                                                                                                                                                                                                                      * @returns {Promise<number>}
                                                                                                                                                                                                                                      */ }, { key: 'getAmountofIssuesOpened', value: function () {var _ref2 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee2() {return _regenerator2.default.wrap(function _callee2$(_context2) {while (1) {switch (_context2.prev = _context2.next) {case 0:_context2.t0 =

                parseInt;_context2.next = 3;return (
                  this.params.contract.getContract().methods.incrementIssueID().call());case 3:_context2.t1 = _context2.sent;return _context2.abrupt('return', (0, _context2.t0)(_context2.t1,
                10));case 5:case 'end':return _context2.stop();}}}, _callee2, this);}));function getAmountofIssuesOpened() {return _ref2.apply(this, arguments);}return getAmountofIssuesOpened;}()



    /**
                                                                                                                                                                                                     * Get Amount of Issues Closed in the network
                                                                                                                                                                                                     * @returns {Promise<number>}
                                                                                                                                                                                                     */ }, { key: 'getAmountofIssuesClosed', value: function () {var _ref3 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee3() {return _regenerator2.default.wrap(function _callee3$(_context3) {while (1) {switch (_context3.prev = _context3.next) {case 0:_context3.t0 =

                parseInt;_context3.next = 3;return (
                  this.params.contract.getContract().methods.closedIdsCount().call());case 3:_context3.t1 = _context3.sent;return _context3.abrupt('return', (0, _context3.t0)(_context3.t1,
                10));case 5:case 'end':return _context3.stop();}}}, _callee3, this);}));function getAmountofIssuesClosed() {return _ref3.apply(this, arguments);}return getAmountofIssuesClosed;}()



    /**
                                                                                                                                                                                                     * Get Amount of Disputers (people who locked BEPRO) in the network
                                                                                                                                                                                                     * @returns {Promise<number>}
                                                                                                                                                                                                     */ }, { key: 'getAmountOfDisputers', value: function () {var _ref4 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee4() {return _regenerator2.default.wrap(function _callee4$(_context4) {while (1) {switch (_context4.prev = _context4.next) {case 0:_context4.t0 =

                parseInt;_context4.next = 3;return (
                  this.params.contract.getContract().methods.oraclersArray().call());case 3:_context4.t1 = _context4.sent;return _context4.abrupt('return', (0, _context4.t0)(_context4.t1,
                10));case 5:case 'end':return _context4.stop();}}}, _callee4, this);}));function getAmountOfDisputers() {return _ref4.apply(this, arguments);}return getAmountOfDisputers;}()



    /**
                                                                                                                                                                                               * Get Amount of Needed for Approve
                                                                                                                                                                                               * @returns {Promise<number>}
                                                                                                                                                                                               */ }, { key: 'percentageNeededForApprove', value: function () {var _ref5 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee5() {return _regenerator2.default.wrap(function _callee5$(_context5) {while (1) {switch (_context5.prev = _context5.next) {case 0:_context5.t0 =

                parseInt;_context5.next = 3;return (
                  this.params.contract.
                  getContract().
                  methods.percentageNeededForApprove().
                  call());case 3:_context5.t1 = _context5.sent;return _context5.abrupt('return', (0, _context5.t0)(_context5.t1,
                10));case 5:case 'end':return _context5.stop();}}}, _callee5, this);}));function percentageNeededForApprove() {return _ref5.apply(this, arguments);}return percentageNeededForApprove;}()



    /**
                                                                                                                                                                                                           * @description Get Amount of % Needed for Dispute
                                                                                                                                                                                                           * @returns {Promise<number>}
                                                                                                                                                                                                           */ }, { key: 'percentageNeededForDispute', value: function () {var _ref6 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee6() {return _regenerator2.default.wrap(function _callee6$(_context6) {while (1) {switch (_context6.prev = _context6.next) {case 0:_context6.t0 =

                parseInt;_context6.next = 3;return (
                  this.params.contract.
                  getContract().
                  methods.percentageNeededForDispute().
                  call());case 3:_context6.t1 = _context6.sent;return _context6.abrupt('return', (0, _context6.t0)(_context6.t1,
                10));case 5:case 'end':return _context6.stop();}}}, _callee6, this);}));function percentageNeededForDispute() {return _ref6.apply(this, arguments);}return percentageNeededForDispute;}()



    /**
                                                                                                                                                                                                           * @description Get Amount of Merge Fee Share
                                                                                                                                                                                                           * @returns {Promise<number>}
                                                                                                                                                                                                           */ }, { key: 'mergeCreatorFeeShare', value: function () {var _ref7 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee7() {return _regenerator2.default.wrap(function _callee7$(_context7) {while (1) {switch (_context7.prev = _context7.next) {case 0:_context7.t0 =

                parseInt;_context7.next = 3;return (
                  this.params.contract.
                  getContract().
                  methods.mergeCreatorFeeShare().
                  call());case 3:_context7.t1 = _context7.sent;return _context7.abrupt('return', (0, _context7.t0)(_context7.t1,
                10));case 5:case 'end':return _context7.stop();}}}, _callee7, this);}));function mergeCreatorFeeShare() {return _ref7.apply(this, arguments);}return mergeCreatorFeeShare;}()



    /**
                                                                                                                                                                                               * @description Get Time of disputableTime
                                                                                                                                                                                               * @returns {Promise<Date>}
                                                                                                                                                                                               */ }, { key: 'disputableTime', value: function () {var _ref8 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee8() {return _regenerator2.default.wrap(function _callee8$(_context8) {while (1) {switch (_context8.prev = _context8.next) {case 0:_context8.t0 =

                _Numbers2.default;_context8.next = 3;return (
                  this.params.contract.
                  getContract().
                  methods.disputableTime().
                  call());case 3:_context8.t1 = _context8.sent;return _context8.abrupt('return', _context8.t0.fromSmartContractTimeToMinutes.call(_context8.t0, _context8.t1,
                10));case 5:case 'end':return _context8.stop();}}}, _callee8, this);}));function disputableTime() {return _ref8.apply(this, arguments);}return disputableTime;}()



    /**
                                                                                                                                                                                   * @description Get Time of redeemTime
                                                                                                                                                                                   * @returns {Promise<Date>}
                                                                                                                                                                                   */ }, { key: 'redeemTime', value: function () {var _ref9 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee9() {return _regenerator2.default.wrap(function _callee9$(_context9) {while (1) {switch (_context9.prev = _context9.next) {case 0:_context9.t0 =

                _Numbers2.default;_context9.next = 3;return (
                  this.params.contract.
                  getContract().
                  methods.redeemTime().
                  call());case 3:_context9.t1 = _context9.sent;return _context9.abrupt('return', _context9.t0.redeemTime.call(_context9.t0, _context9.t1,
                10));case 5:case 'end':return _context9.stop();}}}, _callee9, this);}));function redeemTime() {return _ref9.apply(this, arguments);}return redeemTime;}()




    /**
                                                                                                                                                                           * Get Amount of Needed for Merge
                                                                                                                                                                           * @returns {Promise<number>}
                                                                                                                                                                           */ }, { key: 'percentageNeededForMerge', value: function () {var _ref10 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee10() {return _regenerator2.default.wrap(function _callee10$(_context10) {while (1) {switch (_context10.prev = _context10.next) {case 0:_context10.t0 =

                parseInt;_context10.next = 3;return (
                  this.params.contract.
                  getContract().
                  methods.percentageNeededForMerge().
                  call());case 3:_context10.t1 = _context10.sent;return _context10.abrupt('return', (0, _context10.t0)(_context10.t1,
                10));case 5:case 'end':return _context10.stop();}}}, _callee10, this);}));function percentageNeededForMerge() {return _ref10.apply(this, arguments);}return percentageNeededForMerge;}()



    /**
                                                                                                                                                                                                          * Get Total Amount of Tokens Staked for Bounties in the Network
                                                                                                                                                                                                          * @returns {Promise<number>}
                                                                                                                                                                                                          */ }, { key: 'getTokensStaked', value: function () {var _ref11 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee11() {return _regenerator2.default.wrap(function _callee11$(_context11) {while (1) {switch (_context11.prev = _context11.next) {case 0:_context11.t0 =

                _Numbers2.default;_context11.next = 3;return (
                  this.params.contract.getContract().methods.totalStaked().call());case 3:_context11.t1 = _context11.sent;return _context11.abrupt('return', _context11.t0.fromDecimals.call(_context11.t0, _context11.t1,
                18));case 5:case 'end':return _context11.stop();}}}, _callee11, this);}));function getTokensStaked() {return _ref11.apply(this, arguments);}return getTokensStaked;}()



    /**
                                                                                                                                                                                        * Get Total Amount of BEPRO Staked for Oracles
                                                                                                                                                                                        * @returns {Promise<number>}
                                                                                                                                                                                        */ }, { key: 'getBEPROStaked', value: function () {var _ref12 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee12() {return _regenerator2.default.wrap(function _callee12$(_context12) {while (1) {switch (_context12.prev = _context12.next) {case 0:_context12.t0 =

                _Numbers2.default;_context12.next = 3;return (
                  this.params.contract.getContract().methods.oraclesStaked().call());case 3:_context12.t1 = _context12.sent;return _context12.abrupt('return', _context12.t0.fromDecimals.call(_context12.t0, _context12.t1,
                18));case 5:case 'end':return _context12.stop();}}}, _callee12, this);}));function getBEPROStaked() {return _ref12.apply(this, arguments);}return getBEPROStaked;}()




    /**
                                                                                                                                                                                      * Get Total Amount of Tokens Staked in the network
                                                                                                                                                                                      * @returns {Promise<number>}
                                                                                                                                                                                      */ }, { key: 'votesStaked', value: function () {var _ref13 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee13() {return _regenerator2.default.wrap(function _callee13$(_context13) {while (1) {switch (_context13.prev = _context13.next) {case 0:_context13.t0 =

                _Numbers2.default;_context13.next = 3;return (
                  this.params.contract.
                  getContract().
                  methods.votesStaked().
                  call());case 3:_context13.t1 = _context13.sent;return _context13.abrupt('return', _context13.t0.fromDecimals.call(_context13.t0, _context13.t1,
                18));case 5:case 'end':return _context13.stop();}}}, _callee13, this);}));function votesStaked() {return _ref13.apply(this, arguments);}return votesStaked;}()



    /**
                                                                                                                                                                                * Get Transaction Token Address
                                                                                                                                                                                * @returns {Promise<address>}
                                                                                                                                                                                */ }, { key: 'getTransactionTokenAddress', value: function () {var _ref14 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee14() {return _regenerator2.default.wrap(function _callee14$(_context14) {while (1) {switch (_context14.prev = _context14.next) {case 0:_context14.next = 2;return (

                  this.params.contract.
                  getContract().
                  methods.transactionToken().
                  call());case 2:return _context14.abrupt('return', _context14.sent);case 3:case 'end':return _context14.stop();}}}, _callee14, this);}));function getTransactionTokenAddress() {return _ref14.apply(this, arguments);}return getTransactionTokenAddress;}()



    /**
                                                                                                                                                                                                                                                                              * Verify if Address is Council
                                                                                                                                                                                                                                                                              * @param {Object} params
                                                                                                                                                                                                                                                                              * @param {number} params.address
                                                                                                                                                                                                                                                                              * @returns {Promise<address>}
                                                                                                                                                                                                                                                                              */ }, { key: 'isCouncil', value: function () {var _ref15 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee15(_ref16) {var
        address = _ref16.address;return _regenerator2.default.wrap(function _callee15$(_context15) {while (1) {switch (_context15.prev = _context15.next) {case 0:_context15.next = 2;return (
                  this.getOraclesByAddress({ address: address }));case 2:_context15.t0 = _context15.sent;_context15.next = 5;return this.COUNCIL_AMOUNT();case 5:_context15.t1 = _context15.sent;return _context15.abrupt('return', _context15.t0 >= _context15.t1);case 7:case 'end':return _context15.stop();}}}, _callee15, this);}));function isCouncil(_x2) {return _ref15.apply(this, arguments);}return isCouncil;}()


    /**
                                                                                                                                                                                                                                                                                                                                                                                                                              * Get Settler Token Address
                                                                                                                                                                                                                                                                                                                                                                                                                              * @returns {Promise<address>}
                                                                                                                                                                                                                                                                                                                                                                                                                              */ }, { key: 'getSettlerTokenAddress', value: function () {var _ref17 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee16() {return _regenerator2.default.wrap(function _callee16$(_context16) {while (1) {switch (_context16.prev = _context16.next) {case 0:_context16.next = 2;return (

                  this.params.contract.
                  getContract().
                  methods.settlerToken().
                  call());case 2:return _context16.abrupt('return', _context16.sent);case 3:case 'end':return _context16.stop();}}}, _callee16, this);}));function getSettlerTokenAddress() {return _ref17.apply(this, arguments);}return getSettlerTokenAddress;}()



    /**
                                                                                                                                                                                                                                                                      * Get Amount Needed for Council
                                                                                                                                                                                                                                                                      * @returns {Promise<Integer>}
                                                                                                                                                                                                                                                                      */ }, { key: 'COUNCIL_AMOUNT', value: function () {var _ref18 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee17() {return _regenerator2.default.wrap(function _callee17$(_context17) {while (1) {switch (_context17.prev = _context17.next) {case 0:_context17.t0 =

                _Numbers2.default;_context17.next = 3;return (
                  this.params.contract.
                  getContract().
                  methods.COUNCIL_AMOUNT().
                  call());case 3:_context17.t1 = _context17.sent;return _context17.abrupt('return', _context17.t0.fromDecimals.call(_context17.t0, _context17.t1,
                18));case 5:case 'end':return _context17.stop();}}}, _callee17, this);}));function COUNCIL_AMOUNT() {return _ref18.apply(this, arguments);}return COUNCIL_AMOUNT;}()



    /**
                                                                                                                                                                                      * Get Amount Needed for Council
                                                                                                                                                                                      * @returns {Promise<Integer>}
                                                                                                                                                                                      */

    /**
                                                                                                                                                                                          * Change amount needed for Council
                                                                                                                                                                                          * @param {number} value
                                                                                                                                                                                          * @return {Promise<TransactionObject>}
                                                                                                                                                                                          */ }, { key: 'changeCouncilAmount', value: function () {var _ref19 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee18(
      value) {return _regenerator2.default.wrap(function _callee18$(_context18) {while (1) {switch (_context18.prev = _context18.next) {case 0:_context18.next = 2;return (
                  this.__sendTx(
                  this.params.contract.getContract().methods.changeCOUNCIL_AMOUNT(_Numbers2.default.toSmartContractDecimals(value, this.getSettlerTokenContract().getDecimals()))));case 2:return _context18.abrupt('return', _context18.sent);case 3:case 'end':return _context18.stop();}}}, _callee18, this);}));function changeCouncilAmount(_x3) {return _ref19.apply(this, arguments);}return changeCouncilAmount;}()



    /**
                                                                                                                                                                                                                                                                                                                                                                                                                             * Verify if Issue is still in Draft Mode (Available to use the redeemIssue Action)
                                                                                                                                                                                                                                                                                                                                                                                                                             * @param {Object} params
                                                                                                                                                                                                                                                                                                                                                                                                                             * @param {number} params.issueId
                                                                                                                                                                                                                                                                                                                                                                                                                             * @returns {Promise<boolean>}
                                                                                                                                                                                                                                                                                                                                                                                                                             */ }, { key: 'isIssueInDraft', value: function () {var _ref20 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee19(_ref21) {var
        issueId = _ref21.issueId;return _regenerator2.default.wrap(function _callee19$(_context19) {while (1) {switch (_context19.prev = _context19.next) {case 0:_context19.next = 2;return (
                  this.params.contract.
                  getContract().
                  methods.isIssueInDraft(issueId).
                  call());case 2:return _context19.abrupt('return', _context19.sent);case 3:case 'end':return _context19.stop();}}}, _callee19, this);}));function isIssueInDraft(_x4) {return _ref20.apply(this, arguments);}return isIssueInDraft;}()



    /**
                                                                                                                                                                                                                                                         * Verify if Merge is disputed (i.e. was rejected by the network holders)
                                                                                                                                                                                                                                                         * @param {Object} params
                                                                                                                                                                                                                                                         * @param {number} params.issueId
                                                                                                                                                                                                                                                         * @param {number} params.mergeId
                                                                                                                                                                                                                                                         * @returns {Promise<boolean>}
                                                                                                                                                                                                                                                         */ }, { key: 'isMergeDisputed', value: function () {var _ref22 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee20(_ref23) {var
        issueId = _ref23.issueId,mergeId = _ref23.mergeId;return _regenerator2.default.wrap(function _callee20$(_context20) {while (1) {switch (_context20.prev = _context20.next) {case 0:_context20.next = 2;return (
                  this.params.contract.
                  getContract().
                  methods.isMergeDisputed(issueId, mergeId).
                  call());case 2:return _context20.abrupt('return', _context20.sent);case 3:case 'end':return _context20.stop();}}}, _callee20, this);}));function isMergeDisputed(_x5) {return _ref22.apply(this, arguments);}return isMergeDisputed;}()


    /**
                                                                                                                                                                                                                                                           * Get Issue Id Info
                                                                                                                                                                                                                                                           * @param {Object} params
                                                                                                                                                                                                                                                           * @param {Address} params.address
                                                                                                                                                                                                                                                           * @returns {Promise<number>} Number of votes
                                                                                                                                                                                                                                                           */ }, { key: 'getOraclesByAddress', value: function () {var _ref24 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee21(_ref25) {var
        address = _ref25.address;var r;return _regenerator2.default.wrap(function _callee21$(_context21) {while (1) {switch (_context21.prev = _context21.next) {case 0:_context21.next = 2;return (
                  this.params.contract.
                  getContract().
                  methods.getOraclesByAddress(address).
                  call());case 2:r = _context21.sent;return _context21.abrupt('return',
                _Numbers2.default.fromDecimals(r, 18));case 4:case 'end':return _context21.stop();}}}, _callee21, this);}));function getOraclesByAddress(_x6) {return _ref24.apply(this, arguments);}return getOraclesByAddress;}()


    /**
                                                                                                                                                                                                                                     * Get Oralces By Address
                                                                                                                                                                                                                                     * @param {Object} params
                                                                                                                                                                                                                                     * @param {Address} params.address
                                                                                                                                                                                                                                     * @returns {Integer} oraclesDelegatedByOthers
                                                                                                                                                                                                                                     * @returns {Array | Integer} amounts
                                                                                                                                                                                                                                     * @returns {Array | Address} addresses
                                                                                                                                                                                                                                     * @returns {Integer} tokensLocked
                                                                                                                                                                                                                                     */ }, { key: 'getOraclesSummary', value: function () {var _ref26 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee22(_ref27) {var
        address = _ref27.address;var r;return _regenerator2.default.wrap(function _callee22$(_context22) {while (1) {switch (_context22.prev = _context22.next) {case 0:_context22.next = 2;return (
                  this.params.contract.
                  getContract().
                  methods.getOraclesSummary(address).
                  call());case 2:r = _context22.sent;return _context22.abrupt('return',

                {
                  oraclesDelegatedByOthers: _Numbers2.default.fromDecimals(r[0], 18),
                  amounts: r[1] ? r[1].map(function (a) {return _Numbers2.default.fromDecimals(a, 18);}) : [],
                  addresses: r[2] ? r[2].map(function (a) {return a;}) : [],
                  tokensLocked: _Numbers2.default.fromDecimals(r[3], 18) });case 4:case 'end':return _context22.stop();}}}, _callee22, this);}));function getOraclesSummary(_x7) {return _ref26.apply(this, arguments);}return getOraclesSummary;}()




    /**
                                                                                                                                                                                                                                                      * Get Issue By Id
                                                                                                                                                                                                                                                      * @param {Object} params
                                                                                                                                                                                                                                                      * @param {String} params.issueCID
                                                                                                                                                                                                                                                      * @returns {Promise<TokensNetwork~Issue>}
                                                                                                                                                                                                                                                      */ }, { key: 'getIssueByCID', value: function () {var _ref28 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee23(_ref29) {var
        issueCID = _ref29.issueCID;var r;return _regenerator2.default.wrap(function _callee23$(_context23) {while (1) {switch (_context23.prev = _context23.next) {case 0:_context23.next = 2;return (
                  this.__sendTx(
                  this.params.contract.getContract().methods.getIssueByCID(issueCID),
                  true));case 2:r = _context23.sent;return _context23.abrupt('return',


                {
                  _id: _Numbers2.default.fromHex(r[0]),
                  cid: r[1],
                  creationDate: _Numbers2.default.fromSmartContractTimeToMinutes(r[2]),
                  tokensStaked: _Numbers2.default.fromDecimals(r[3], 18),
                  issueGenerator: r[4],
                  mergeProposalsAmount: parseInt(r[5], 10),
                  finalized: r[6],
                  canceled: r[7],
                  recognizedAsFinished: r[8] });case 4:case 'end':return _context23.stop();}}}, _callee23, this);}));function getIssueByCID(_x8) {return _ref28.apply(this, arguments);}return getIssueByCID;}()



    /**
                                                                                                                                                                                                                  * Get Issue By Id
                                                                                                                                                                                                                  * @param {Object} params
                                                                                                                                                                                                                  * @param {Integer} params.issueId
                                                                                                                                                                                                                  * @returns {Promise<TokensNetwork~Issue>}
                                                                                                                                                                                                                  */ }, { key: 'getIssueById', value: function () {var _ref30 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee24(_ref31) {var
        issueId = _ref31.issueId;var r;return _regenerator2.default.wrap(function _callee24$(_context24) {while (1) {switch (_context24.prev = _context24.next) {case 0:_context24.next = 2;return (
                  this.__sendTx(
                  this.params.contract.getContract().methods.getIssueById(issueId),
                  true));case 2:r = _context24.sent;return _context24.abrupt('return',


                {
                  _id: _Numbers2.default.fromHex(r[0]),
                  cid: r[1],
                  creationDate: _Numbers2.default.fromSmartContractTimeToMinutes(r[2]),
                  tokensStaked: _Numbers2.default.fromDecimals(r[3], 18),
                  issueGenerator: r[4],
                  mergeProposalsAmount: parseInt(r[5], 10),
                  finalized: r[6],
                  canceled: r[7],
                  recognizedAsFinished: r[8] });case 4:case 'end':return _context24.stop();}}}, _callee24, this);}));function getIssueById(_x9) {return _ref30.apply(this, arguments);}return getIssueById;}()




    /**
                                                                                                                                                                                                                * Get votes, address and amounts for issue
                                                                                                                                                                                                                * @param {Object} params
                                                                                                                                                                                                                * @param {number} params.issue_id
                                                                                                                                                                                                                * @param {number} params.merge_id
                                                                                                                                                                                                                * @return {Promise<TokensNetwork~MergedIssue>}
                                                                                                                                                                                                                */ }, { key: 'getMergeById', value: function () {var _ref32 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee25(_ref33) {var
        issue_id = _ref33.issue_id,merge_id = _ref33.merge_id;var r;return _regenerator2.default.wrap(function _callee25$(_context25) {while (1) {switch (_context25.prev = _context25.next) {case 0:_context25.next = 2;return (
                  this.__sendTx(
                  this.params.contract.
                  getContract().
                  methods.getMergeById(issue_id, merge_id),
                  true));case 2:r = _context25.sent;return _context25.abrupt('return',


                {
                  _id: _Numbers2.default.fromHex(r[0]),
                  votes: _Numbers2.default.fromDecimals(r[1], 18),
                  disputes: _Numbers2.default.fromDecimals(r[2], 18),
                  prAddresses: r[3],
                  prAmounts: r[4] ? r[4].map(function (a) {return _Numbers2.default.fromDecimals(a, 18);}) : 0,
                  proposalAddress: r[5] });case 4:case 'end':return _context25.stop();}}}, _callee25, this);}));function getMergeById(_x10) {return _ref32.apply(this, arguments);}return getMergeById;}()



    /**
                                                                                                                                                                                                            * Approve ERC20 Allowance
                                                                                                                                                                                                            * @function
                                                                                                                                                                                                            * @return {Promise<number>}
                                                                                                                                                                                                            */








    /**
                                                                                                                                                                                                                * Approve ERC20 Allowance
                                                                                                                                                                                                                * @function
                                                                                                                                                                                                                * @return {Promise<number>}
                                                                                                                                                                                                                */








    /**
                                                                                                                                                                                                                    * Verify if Approved
                                                                                                                                                                                                                    * @function
                                                                                                                                                                                                                    * @param {Object} params
                                                                                                                                                                                                                    * @param {number} params.amount
                                                                                                                                                                                                                    * @param {Address} params.address
                                                                                                                                                                                                                    * @return {Promise<number>}
                                                                                                                                                                                                                    */






    /**
                                                                                                                                                                                                                        * Verify if Approved
                                                                                                                                                                                                                        * @function
                                                                                                                                                                                                                        * @param {Object} params
                                                                                                                                                                                                                        * @param {number} params.amount
                                                                                                                                                                                                                        * @param {Address} params.address
                                                                                                                                                                                                                        * @return {Promise<number>}
                                                                                                                                                                                                                        */ }, { key: 'lock',






    /**
                                                                                                                                                                                                                                             * lock tokens for oracles
                                                                                                                                                                                                                                             * @param {Object} params
                                                                                                                                                                                                                                             * @params params.tokenAmount {number}
                                                                                                                                                                                                                                             * @throws {Error} Tokens Amount has to be higher than 0
                                                                                                                                                                                                                                             * @throws {Error} Tokens not approve for tx, first use 'approveERC20'
                                                                                                                                                                                                                                             * @return {Promise<TransactionObject>}
                                                                                                                                                                                                                                             */value: function () {var _ref34 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee26(_ref35) {var
        tokenAmount = _ref35.tokenAmount;return _regenerator2.default.wrap(function _callee26$(_context26) {while (1) {switch (_context26.prev = _context26.next) {case 0:if (!(
                tokenAmount <= 0)) {_context26.next = 2;break;}throw (
                  new Error('Token Amount has to be higher than 0'));case 2:_context26.next = 4;return (



                  this.__sendTx(
                  this.params.contract.getContract().methods.lock(_Numbers2.default.toSmartContractDecimals(tokenAmount, this.getSettlerTokenContract().getDecimals()))));case 4:return _context26.abrupt('return', _context26.sent);case 5:case 'end':return _context26.stop();}}}, _callee26, this);}));function lock(_x11) {return _ref34.apply(this, arguments);}return lock;}()



    /**
                                                                                                                                                                                                                                                                                                                                                                                     * Unlock Tokens for oracles
                                                                                                                                                                                                                                                                                                                                                                                     * @param {Object} params
                                                                                                                                                                                                                                                                                                                                                                                     * @params params.tokenAmount {number}
                                                                                                                                                                                                                                                                                                                                                                                     * @params params.from {address}
                                                                                                                                                                                                                                                                                                                                                                                     * @throws {Error} Tokens Amount has to be higher than 0
                                                                                                                                                                                                                                                                                                                                                                                     * @return {Promise<TransactionObject>}
                                                                                                                                                                                                                                                                                                                                                                                     */ }, { key: 'unlock', value: function () {var _ref36 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee27(_ref37) {var
        tokenAmount = _ref37.tokenAmount,from = _ref37.from;return _regenerator2.default.wrap(function _callee27$(_context27) {while (1) {switch (_context27.prev = _context27.next) {case 0:if (!(
                tokenAmount <= 0)) {_context27.next = 2;break;}throw (
                  new Error('Tokens Amount has to be higher than 0'));case 2:_context27.next = 4;return (


                  this.__sendTx(
                  this.params.contract.getContract().methods.unlock(_Numbers2.default.toSmartContractDecimals(tokenAmount, this.getSettlerTokenContract().getDecimals()), from)));case 4:return _context27.abrupt('return', _context27.sent);case 5:case 'end':return _context27.stop();}}}, _callee27, this);}));function unlock(_x12) {return _ref36.apply(this, arguments);}return unlock;}()



    /**
                                                                                                                                                                                                                                                                                                                                                                                                 * Delegated Oracles to others
                                                                                                                                                                                                                                                                                                                                                                                                 * @param {Object} params
                                                                                                                                                                                                                                                                                                                                                                                                 * @param {number} params.tokenAmount
                                                                                                                                                                                                                                                                                                                                                                                                 * @param {Address} params.delegatedTo
                                                                                                                                                                                                                                                                                                                                                                                                 * @return {Promise<TransactionObject>}
                                                                                                                                                                                                                                                                                                                                                                                                 */ }, { key: 'delegateOracles', value: function () {var _ref38 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee28(_ref39) {var
        tokenAmount = _ref39.tokenAmount,delegatedTo = _ref39.delegatedTo;return _regenerator2.default.wrap(function _callee28$(_context28) {while (1) {switch (_context28.prev = _context28.next) {case 0:if (!(
                tokenAmount <= 0)) {_context28.next = 2;break;}throw (
                  new Error('Tokens Amount has to be higher than 0'));case 2:_context28.next = 4;return (


                  this.__sendTx(
                  this.params.contract.
                  getContract().
                  methods.delegateOracles(_Numbers2.default.toSmartContractDecimals(tokenAmount, this.getTransactionTokenContract().getDecimals()), delegatedTo)));case 4:return _context28.abrupt('return', _context28.sent);case 5:case 'end':return _context28.stop();}}}, _callee28, this);}));function delegateOracles(_x13) {return _ref38.apply(this, arguments);}return delegateOracles;}()



    /**
                                                                                                                                                                                                                                                                                                                                                                                                    * Recognize Issue as Resolved
                                                                                                                                                                                                                                                                                                                                                                                                    * @param {Object} params
                                                                                                                                                                                                                                                                                                                                                                                                    * @param {Number} params.issueId
                                                                                                                                                                                                                                                                                                                                                                                                    * @return {Promise<TransactionObject>}
                                                                                                                                                                                                                                                                                                                                                                                                    */ }, { key: 'recognizeAsFinished', value: function () {var _ref40 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee29(_ref41) {var
        issueId = _ref41.issueId;return _regenerator2.default.wrap(function _callee29$(_context29) {while (1) {switch (_context29.prev = _context29.next) {case 0:_context29.next = 2;return (
                  this.__sendTx(
                  this.params.contract.
                  getContract().
                  methods.recognizeAsFinished(issueId)));case 2:return _context29.abrupt('return', _context29.sent);case 3:case 'end':return _context29.stop();}}}, _callee29, this);}));function recognizeAsFinished(_x14) {return _ref40.apply(this, arguments);}return recognizeAsFinished;}()



    /**
                                                                                                                                                                                                                                                                                                  * open Issue
                                                                                                                                                                                                                                                                                                  * @param {Object} params
                                                                                                                                                                                                                                                                                                  * @param {number} params.tokenAmount
                                                                                                                                                                                                                                                                                                  * @param {String} params.cid
                                                                                                                                                                                                                                                                                                  * @throws {Error} Tokens Amount has to be higher than 0
                                                                                                                                                                                                                                                                                                  * @throws {Error} Tokens not approve for tx, first use 'approveERC20'
                                                                                                                                                                                                                                                                                                  * @return {Promise<TransactionObject>}
                                                                                                                                                                                                                                                                                                  */ }, { key: 'openIssue', value: function () {var _ref42 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee30(_ref43) {var
        tokenAmount = _ref43.tokenAmount,cid = _ref43.cid;return _regenerator2.default.wrap(function _callee30$(_context30) {while (1) {switch (_context30.prev = _context30.next) {case 0:if (!(
                tokenAmount < 0)) {_context30.next = 2;break;}throw (
                  new Error('Tokens Amount has to be higher than 0'));case 2:_context30.next = 4;return (


                  this.__sendTx(
                  this.params.contract.getContract().methods.openIssue(cid, _Numbers2.default.toSmartContractDecimals(tokenAmount, this.getTransactionTokenContract().getDecimals()))));case 4:return _context30.abrupt('return', _context30.sent);case 5:case 'end':return _context30.stop();}}}, _callee30, this);}));function openIssue(_x15) {return _ref42.apply(this, arguments);}return openIssue;}()



    /**
                                                                                                                                                                                                                                                                                                                                                                                                             * redeem Issue
                                                                                                                                                                                                                                                                                                                                                                                                             * @param {Object} params
                                                                                                                                                                                                                                                                                                                                                                                                             * @param {number} params.issueId
                                                                                                                                                                                                                                                                                                                                                                                                             * @return {Promise<TransactionObject>}
                                                                                                                                                                                                                                                                                                                                                                                                             */ }, { key: 'redeemIssue', value: function () {var _ref44 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee31(_ref45) {var
        issueId = _ref45.issueId;return _regenerator2.default.wrap(function _callee31$(_context31) {while (1) {switch (_context31.prev = _context31.next) {case 0:_context31.next = 2;return (
                  this.__sendTx(
                  this.params.contract.getContract().methods.redeemIssue(issueId)));case 2:return _context31.abrupt('return', _context31.sent);case 3:case 'end':return _context31.stop();}}}, _callee31, this);}));function redeemIssue(_x16) {return _ref44.apply(this, arguments);}return redeemIssue;}()




    /**
                                                                                                                                                                                                                                                                                                             * open Issue
                                                                                                                                                                                                                                                                                                             * @param {Object} params
                                                                                                                                                                                                                                                                                                             * @param {number} params.issueID
                                                                                                                                                                                                                                                                                                             * @param {number} params.tokenAmount
                                                                                                                                                                                                                                                                                                             * @param {address} params.address
                                                                                                                                                                                                                                                                                                             * @return {Promise<TransactionObject>}
                                                                                                                                                                                                                                                                                                             */ }, { key: 'updateIssue', value: function () {var _ref46 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee32(_ref47) {var
        issueID = _ref47.issueID,tokenAmount = _ref47.tokenAmount;return _regenerator2.default.wrap(function _callee32$(_context32) {while (1) {switch (_context32.prev = _context32.next) {case 0:if (!(
                tokenAmount < 0)) {_context32.next = 2;break;}throw (
                  new Error('Tokens Amount has to be higher than 0'));case 2:_context32.next = 4;return (



                  this.__sendTx(
                  this.params.contract.
                  getContract().
                  methods.updateIssue(issueID, _Numbers2.default.toSmartContractDecimals(tokenAmount, this.getTransactionTokenContract().getDecimals()))));case 4:return _context32.abrupt('return', _context32.sent);case 5:case 'end':return _context32.stop();}}}, _callee32, this);}));function updateIssue(_x17) {return _ref46.apply(this, arguments);}return updateIssue;}()



    /**
                                                                                                                                                                                                                                                                                                                                                                                    * Propose Merge of Issue
                                                                                                                                                                                                                                                                                                                                                                                    * @param {Object} params
                                                                                                                                                                                                                                                                                                                                                                                    * @param {number} params.issueID
                                                                                                                                                                                                                                                                                                                                                                                    * @param {Address[]} params.prAddresses
                                                                                                                                                                                                                                                                                                                                                                                    * @param {number[]} params.prAmounts
                                                                                                                                                                                                                                                                                                                                                                                    * @return {Promise<TransactionObject>}
                                                                                                                                                                                                                                                                                                                                                                                    */ }, { key: 'proposeIssueMerge', value: function () {var _ref48 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee33(_ref49) {var _this2 = this;var
        issueID = _ref49.issueID,prAddresses = _ref49.prAddresses,prAmounts = _ref49.prAmounts;var prAmountsWithDecimals;return _regenerator2.default.wrap(function _callee33$(_context33) {while (1) {switch (_context33.prev = _context33.next) {case 0:if (!(
                prAddresses.length !== prAmounts.length)) {_context33.next = 2;break;}throw (
                  new Error('prAddresses dont match prAmounts size'));case 2:

                prAmountsWithDecimals = prAmounts.map(function (p) {return _Numbers2.default.toSmartContractDecimals(p, _this2.getTransactionTokenContract().getDecimals());});_context33.next = 5;return (

                  this.__sendTx(
                  this.params.contract.
                  getContract().
                  methods.proposeIssueMerge(issueID, prAddresses, prAmountsWithDecimals)));case 5:return _context33.abrupt('return', _context33.sent);case 6:case 'end':return _context33.stop();}}}, _callee33, this);}));function proposeIssueMerge(_x18) {return _ref48.apply(this, arguments);}return proposeIssueMerge;}()



    /**
                                                                                                                                                                                                                                                                                                                                * close Issue
                                                                                                                                                                                                                                                                                                                                * @param {Object} params
                                                                                                                                                                                                                                                                                                                                * @param {number} params.issueID
                                                                                                                                                                                                                                                                                                                                * @param {number} params.mergeID
                                                                                                                                                                                                                                                                                                                                * @return {Promise<TransactionObject>}
                                                                                                                                                                                                                                                                                                                                */ }, { key: 'closeIssue', value: function () {var _ref50 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee34(_ref51) {var
        issueID = _ref51.issueID,mergeID = _ref51.mergeID;return _regenerator2.default.wrap(function _callee34$(_context34) {while (1) {switch (_context34.prev = _context34.next) {case 0:_context34.next = 2;return (
                  this.__sendTx(
                  this.params.contract.getContract().methods.closeIssue(issueID, mergeID)));case 2:return _context34.abrupt('return', _context34.sent);case 3:case 'end':return _context34.stop();}}}, _callee34, this);}));function closeIssue(_x19) {return _ref50.apply(this, arguments);}return closeIssue;}()



    /**
                                                                                                                                                                                                                                                                                                                   * Dispute Merge
                                                                                                                                                                                                                                                                                                                   * @param {Object} params
                                                                                                                                                                                                                                                                                                                   * @param {number} params.issueID
                                                                                                                                                                                                                                                                                                                   * @param {number} params.mergeID
                                                                                                                                                                                                                                                                                                                   * @return {Promise<TransactionObject>}
                                                                                                                                                                                                                                                                                                                   */ }, { key: 'disputeMerge', value: function () {var _ref52 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee35(_ref53) {var
        issueID = _ref53.issueID,mergeID = _ref53.mergeID;return _regenerator2.default.wrap(function _callee35$(_context35) {while (1) {switch (_context35.prev = _context35.next) {case 0:_context35.next = 2;return (
                  this.__sendTx(
                  this.params.contract.getContract().methods.disputeMerge(issueID, mergeID)));case 2:return _context35.abrupt('return', _context35.sent);case 3:case 'end':return _context35.stop();}}}, _callee35, this);}));function disputeMerge(_x20) {return _ref52.apply(this, arguments);}return disputeMerge;}()



    /**
                                                                                                                                                                                                                                                                                                                          * Deploys current contract and awaits for {@link TokensNetwork#__assert}
                                                                                                                                                                                                                                                                                                                          * @function
                                                                                                                                                                                                                                                                                                                          * @param {Object} params
                                                                                                                                                                                                                                                                                                                          * @param {string} params.settlerTokenAddress
                                                                                                                                                                                                                                                                                                                          * @param {string} params.transactionTokenAddress
                                                                                                                                                                                                                                                                                                                          * @param {string} params.governanceAddress
                                                                                                                                                                                                                                                                                                                          * @param {function():void} params.callback
                                                                                                                                                                                                                                                                                                                          * @return {Promise<*|undefined>}
                                                                                                                                                                                                                                                                                                                          */











    /**
                                                                                                                                                                                                                                                                                                                              * @function
                                                                                                                                                                                                                                                                                                                              * @return ERC20Contract|null
                                                                                                                                                                                                                                                                                                                              */



    /**
                                                                                                                                                                                                                                                                                                                                  * @function
                                                                                                                                                                                                                                                                                                                                  * @return ERC20Contract|null
                                                                                                                                                                                                                                                                                                                                  */ }]);return Network;}(_IContract3.default);var _initialiseProps = function _initialiseProps() {var _this3 = this;this.__assert = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee36() {var transactionalAddress, settlerAddresss;return _regenerator2.default.wrap(function _callee36$(_context36) {while (1) {switch (_context36.prev = _context36.next) {case 0:if (_this3.getAddress()) {_context36.next = 2;break;}throw new Error('Contract is not deployed, first deploy it and provide a contract address');case 2: // Use ABI
            _this3.params.contract.use(_interfaces.network, _this3.getAddress());_context36.next = 5;return _this3.getTransactionTokenAddress();case 5:transactionalAddress = _context36.sent;_context36.next = 8;return _this3.getSettlerTokenAddress();case 8:settlerAddresss = _context36.sent; // Set Token Address Contract for easy access
            _this3.params.transactionalToken = new _ERC20Contract2.default({ web3Connection: _this3.web3Connection, contractAddress: transactionalAddress }); // Set Token Address Contract for easy access
            _this3.params.settlerToken = new _ERC20Contract2.default({ web3Connection: _this3.web3Connection, contractAddress: settlerAddresss }); // Assert Token Contract
            _context36.next = 13;return _this3.params.transactionalToken.login();case 13:_context36.next = 15;return _this3.params.transactionalToken.__assert();case 15:_context36.next = 17;return _this3.params.settlerToken.login();case 17:_context36.next = 19;return _this3.params.settlerToken.__assert();case 19:case 'end':return _context36.stop();}}}, _callee36, _this3);}));this.approveSettlerERC20Token = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee37() {var totalMaxAmount;return _regenerator2.default.wrap(function _callee37$(_context37) {while (1) {switch (_context37.prev = _context37.next) {case 0:_context37.next = 2;return _this3.getSettlerTokenContract().totalSupply();case 2:totalMaxAmount = _context37.sent;_context37.next = 5;return _this3.getSettlerTokenContract().approve({ address: _this3.getAddress(), amount: totalMaxAmount });case 5:return _context37.abrupt('return', _context37.sent);case 6:case 'end':return _context37.stop();}}}, _callee37, _this3);}));this.approveTransactionalERC20Token = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee38() {var totalMaxAmount;return _regenerator2.default.wrap(function _callee38$(_context38) {while (1) {switch (_context38.prev = _context38.next) {case 0:_context38.next = 2;return _this3.getTransactionTokenContract().totalSupply();case 2:totalMaxAmount = _context38.sent;_context38.next = 5;return _this3.getTransactionTokenContract().approve({ address: _this3.getAddress(), amount: totalMaxAmount });case 5:return _context38.abrupt('return', _context38.sent);case 6:case 'end':return _context38.stop();}}}, _callee38, _this3);}));this.isApprovedSettlerToken = function () {var _ref57 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee39(_ref58) {var amount = _ref58.amount,address = _ref58.address;return _regenerator2.default.wrap(function _callee39$(_context39) {while (1) {switch (_context39.prev = _context39.next) {case 0:_context39.next = 2;return _this3.getSettlerTokenContract().isApproved({ address: address, amount: amount, spenderAddress: _this3.getAddress() });case 2:return _context39.abrupt('return', _context39.sent);case 3:case 'end':return _context39.stop();}}}, _callee39, _this3);}));return function (_x21) {return _ref57.apply(this, arguments);};}();this.isApprovedTransactionalToken = function () {var _ref59 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee40(_ref60) {var amount = _ref60.amount,address = _ref60.address;return _regenerator2.default.wrap(function _callee40$(_context40) {while (1) {switch (_context40.prev = _context40.next) {case 0:_context40.next = 2;return _this3.getTransactionTokenContract().isApproved({ address: address, amount: amount, spenderAddress: _this3.getAddress() });case 2:return _context40.abrupt('return', _context40.sent);case 3:case 'end':return _context40.stop();}}}, _callee40, _this3);}));return function (_x22) {return _ref59.apply(this, arguments);};}();this.deploy = function () {var _ref61 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee41(_ref62) {var settlerTokenAddress = _ref62.settlerTokenAddress,transactionTokenAddress = _ref62.transactionTokenAddress,governanceAddress = _ref62.governanceAddress,callback = _ref62.callback;var params, res;return _regenerator2.default.wrap(function _callee41$(_context41) {while (1) {switch (_context41.prev = _context41.next) {case 0:params = [settlerTokenAddress, transactionTokenAddress, governanceAddress];_context41.next = 3;return _this3.__deploy(params, callback);case 3:res = _context41.sent;_this3.params.contractAddress = res.contractAddress; /* Call to Backend API */_context41.next = 7;return _this3.__assert();case 7:return _context41.abrupt('return', res);case 8:case 'end':return _context41.stop();}}}, _callee41, _this3);}));return function (_x23) {return _ref61.apply(this, arguments);};}();this.getSettlerTokenContract = function () {return _this3.params.settlerToken;};this.getTransactionTokenContract = function () {return _this3.params.transactionalToken;};};exports.default = Network;