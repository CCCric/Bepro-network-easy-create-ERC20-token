'use strict';Object.defineProperty(exports, "__esModule", { value: true });var _regenerator = require('babel-runtime/regenerator');var _regenerator2 = _interopRequireDefault(_regenerator);var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);var _extends2 = require('babel-runtime/helpers/extends');var _extends3 = _interopRequireDefault(_extends2);var _getPrototypeOf = require('babel-runtime/core-js/object/get-prototype-of');var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);var _createClass2 = require('babel-runtime/helpers/createClass');var _createClass3 = _interopRequireDefault(_createClass2);var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);var _inherits2 = require('babel-runtime/helpers/inherits');var _inherits3 = _interopRequireDefault(_inherits2);

var _interfaces = require('../../interfaces');
var _Numbers = require('../../utils/Numbers');var _Numbers2 = _interopRequireDefault(_Numbers);
var _IContract2 = require('../IContract');var _IContract3 = _interopRequireDefault(_IContract2);
var _ERC20Contract = require('../ERC20/ERC20Contract');var _ERC20Contract2 = _interopRequireDefault(_ERC20Contract);function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}


/**
                                                                                                                                                                                                                   * @typedef {Object} NetworkFactory~Options
                                                                                                                                                                                                                   * @property {Boolean} test
                                                                                                                                                                                                                   * @property {Boolean} localtest ganache local blockchain
                                                                                                                                                                                                                   * @property {Web3Connection} [web3Connection=Web3Connection] created from params: 'test', 'localtest' and optional 'web3Connection' string and 'privateKey'
                                                                                                                                                                                                                   * @property {string} [contractAddress]
                                                                                                                                                                                                                   */

/**
                                                                                                                                                                                                                       * Network Object
                                                                                                                                                                                                                       * @class Network
                                                                                                                                                                                                                       * @param {Network~Options} options
                                                                                                                                                                                                                       */ /* eslint-disable no-underscore-dangle */ // eslint-disable-next-line no-unused-vars
var
Network = function (_IContract) {(0, _inherits3.default)(Network, _IContract);
  function Network(params) {(0, _classCallCheck3.default)(this, Network);var _this = (0, _possibleConstructorReturn3.default)(this, (Network.__proto__ || (0, _getPrototypeOf2.default)(Network)).call(this, (0, _extends3.default)({
      abi: _interfaces.networkFactory }, params)));_initialiseProps.call(_this);return _this;
  }


  /**
     * Asserts the 2 {@link ERC20Contract} on the current address
     * @function
     * @return {Promise<void>}
     * @throws {Error} Contract is not deployed, first deploy it and provide a contract address
     */(0, _createClass3.default)(Network, [{ key: 'getNetworkByAddress',






















    /**
                                                                           * Get Network By Creator Address
                                                                           * @param {Address} address
                                                                           * @returns {Adddress}
                                                                           */value: function () {var _ref = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee(
      address) {return _regenerator2.default.wrap(function _callee$(_context) {while (1) {switch (_context.prev = _context.next) {case 0:_context.next = 2;return (
                  this.params.contract.
                  getContract().
                  methods.getNetworkByAddress(address).
                  call());case 2:return _context.abrupt('return', _context.sent);case 3:case 'end':return _context.stop();}}}, _callee, this);}));function getNetworkByAddress(_x) {return _ref.apply(this, arguments);}return getNetworkByAddress;}()


    /**
                                                                                                                                                                                                                                                        * Get Network By Id
                                                                                                                                                                                                                                                        * @param {number} id
                                                                                                                                                                                                                                                        * @returns {Adddress}
                                                                                                                                                                                                                                                        */ }, { key: 'getNetworkById', value: function () {var _ref2 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee2(
      id) {return _regenerator2.default.wrap(function _callee2$(_context2) {while (1) {switch (_context2.prev = _context2.next) {case 0:_context2.next = 2;return (
                  this.params.contract.
                  getContract().
                  methods.getNetworkById(id).
                  call());case 2:return _context2.abrupt('return', _context2.sent);case 3:case 'end':return _context2.stop();}}}, _callee2, this);}));function getNetworkById(_x2) {return _ref2.apply(this, arguments);}return getNetworkById;}()


    /**
                                                                                                                                                                                                                                                      * Get Amount of Networks Forked in the Protocol
                                                                                                                                                                                                                                                      * @returns {Promise<number>}
                                                                                                                                                                                                                                                      */ }, { key: 'getAmountofNetworksForked', value: function () {var _ref3 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee3() {return _regenerator2.default.wrap(function _callee3$(_context3) {while (1) {switch (_context3.prev = _context3.next) {case 0:_context3.next = 2;return (

                  this.params.contract.getContract().methods.networksAmount().call());case 2:return _context3.abrupt('return', _context3.sent);case 3:case 'end':return _context3.stop();}}}, _callee3, this);}));function getAmountofNetworksForked() {return _ref3.apply(this, arguments);}return getAmountofNetworksForked;}()



    /**
                                                                                                                                                                                                                                                                                                                                     * Get Total Amount of Tokens Locked by Operator in the Network
                                                                                                                                                                                                                                                                                                                                     * @param {Address} address
                                                                                                                                                                                                                                                                                                                                     * @returns {Promise<number>}
                                                                                                                                                                                                                                                                                                                                     */ }, { key: 'getLockedStakedByAddress', value: function () {var _ref4 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee4(
      address) {return _regenerator2.default.wrap(function _callee4$(_context4) {while (1) {switch (_context4.prev = _context4.next) {case 0:_context4.t0 =
                _Numbers2.default;_context4.next = 3;return (
                  this.params.contract.getContract().methods.tokensLocked(address).call());case 3:_context4.t1 = _context4.sent;return _context4.abrupt('return', _context4.t0.fromDecimals.call(_context4.t0, _context4.t1,
                18));case 5:case 'end':return _context4.stop();}}}, _callee4, this);}));function getLockedStakedByAddress(_x3) {return _ref4.apply(this, arguments);}return getLockedStakedByAddress;}()



    /**
                                                                                                                                                                                                            * Get Open Issues Available
                                                                                                                                                                                                            * @param {Address} address
                                                                                                                                                                                                            * @returns {Address[]}
                                                                                                                                                                                                            */ }, { key: 'getNetworks', value: function () {var _ref5 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee5() {var res;return _regenerator2.default.wrap(function _callee5$(_context5) {while (1) {switch (_context5.prev = _context5.next) {case 0:_context5.next = 2;return (

                  this.params.contract.
                  getContract().
                  methods.networksArray().
                  call());case 2:res = _context5.sent;return _context5.abrupt('return',
                res);case 4:case 'end':return _context5.stop();}}}, _callee5, this);}));function getNetworks() {return _ref5.apply(this, arguments);}return getNetworks;}()


    /**
                                                                                                                                                                               * Get Total Amount of Tokens Staked in the Protocol
                                                                                                                                                                               * @returns {Promise<number>}
                                                                                                                                                                               */ }, { key: 'getBEPROLocked', value: function () {var _ref6 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee6() {return _regenerator2.default.wrap(function _callee6$(_context6) {while (1) {switch (_context6.prev = _context6.next) {case 0:_context6.t0 =

                _Numbers2.default;_context6.next = 3;return (
                  this.params.contract.getContract().methods.tokensLockedTotal().call());case 3:_context6.t1 = _context6.sent;return _context6.abrupt('return', _context6.t0.fromDecimals.call(_context6.t0, _context6.t1,
                18));case 5:case 'end':return _context6.stop();}}}, _callee6, this);}));function getBEPROLocked() {return _ref6.apply(this, arguments);}return getBEPROLocked;}()



    /**
                                                                                                                                                                                     * Verify if Address is Council
                                                                                                                                                                                     * @param {Object} params
                                                                                                                                                                                     * @param {number} params.address
                                                                                                                                                                                     * @returns {Promise<address>}
                                                                                                                                                                                     */ }, { key: 'isOperator', value: function () {var _ref7 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee7(_ref8) {var
        address = _ref8.address;return _regenerator2.default.wrap(function _callee7$(_context7) {while (1) {switch (_context7.prev = _context7.next) {case 0:_context7.next = 2;return (
                  this.getLockedStakedByAddress(address));case 2:_context7.t0 = _context7.sent;_context7.next = 5;return this.OPERATOR_AMOUNT();case 5:_context7.t1 = _context7.sent;return _context7.abrupt('return', _context7.t0 >= _context7.t1);case 7:case 'end':return _context7.stop();}}}, _callee7, this);}));function isOperator(_x4) {return _ref7.apply(this, arguments);}return isOperator;}()


    /**
                                                                                                                                                                                                                                                                                                                                                                                                                * Get Settler Token Address
                                                                                                                                                                                                                                                                                                                                                                                                                * @returns {Promise<address>}
                                                                                                                                                                                                                                                                                                                                                                                                                */ }, { key: 'getSettlerTokenAddress', value: function () {var _ref9 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee8() {return _regenerator2.default.wrap(function _callee8$(_context8) {while (1) {switch (_context8.prev = _context8.next) {case 0:_context8.next = 2;return (

                  this.params.contract.
                  getContract().
                  methods.beproAddress().
                  call());case 2:return _context8.abrupt('return', _context8.sent);case 3:case 'end':return _context8.stop();}}}, _callee8, this);}));function getSettlerTokenAddress() {return _ref9.apply(this, arguments);}return getSettlerTokenAddress;}()


    /**
                                                                                                                                                                                                                                                                 * Get Amount Needed for Operator
                                                                                                                                                                                                                                                                 * @returns {Promise<Integer>}
                                                                                                                                                                                                                                                                 */ }, { key: 'OPERATOR_AMOUNT', value: function () {var _ref10 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee9() {return _regenerator2.default.wrap(function _callee9$(_context9) {while (1) {switch (_context9.prev = _context9.next) {case 0:_context9.t0 =

                _Numbers2.default;_context9.next = 3;return (
                  this.params.contract.
                  getContract().
                  methods.OPERATOR_AMOUNT().
                  call());case 3:_context9.t1 = _context9.sent;return _context9.abrupt('return', _context9.t0.fromDecimals.call(_context9.t0, _context9.t1,
                18));case 5:case 'end':return _context9.stop();}}}, _callee9, this);}));function OPERATOR_AMOUNT() {return _ref10.apply(this, arguments);}return OPERATOR_AMOUNT;}()



    /**
                                                                                                                                                                                      * Approve ERC20 Allowance
                                                                                                                                                                                      * @function
                                                                                                                                                                                      * @return {Promise<number>}
                                                                                                                                                                                      */









    /**
                                                                                                                                                                                          * Verify if Approved
                                                                                                                                                                                          * @function
                                                                                                                                                                                          * @param {Object} params
                                                                                                                                                                                          * @param {number} params.amount
                                                                                                                                                                                          * @param {Address} params.address
                                                                                                                                                                                          * @return {Promise<number>}
                                                                                                                                                                                          */ }, { key: 'lock',






    /**
                                                                                                                                                                                                                * lock tokens for operator use
                                                                                                                                                                                                                * @param {Object} params
                                                                                                                                                                                                                * @params params.tokenAmount {number}
                                                                                                                                                                                                                * @throws {Error} Tokens Amount has to be higher than 0
                                                                                                                                                                                                                * @throws {Error} Tokens not approve for tx, first use 'approveERC20'
                                                                                                                                                                                                                * @return {Promise<TransactionObject>}
                                                                                                                                                                                                                */value: function () {var _ref11 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee10(_ref12) {var
        tokenAmount = _ref12.tokenAmount;return _regenerator2.default.wrap(function _callee10$(_context10) {while (1) {switch (_context10.prev = _context10.next) {case 0:if (!(
                tokenAmount <= 0)) {_context10.next = 2;break;}throw (
                  new Error('Token Amount has to be higher than 0'));case 2:_context10.next = 4;return (


                  this.__sendTx(
                  this.params.contract.getContract().methods.lock(_Numbers2.default.toSmartContractDecimals(tokenAmount, this.getSettlerTokenContract().getDecimals()))));case 4:return _context10.abrupt('return', _context10.sent);case 5:case 'end':return _context10.stop();}}}, _callee10, this);}));function lock(_x5) {return _ref11.apply(this, arguments);}return lock;}()



    /**
                                                                                                                                                                                                                                                                                                                                                                                     * Unlock Tokens for oracles
                                                                                                                                                                                                                                                                                                                                                                                     * @throws {Error} Tokens Amount has to be higher than 0
                                                                                                                                                                                                                                                                                                                                                                                     * @return {Promise<TransactionObject>}
                                                                                                                                                                                                                                                                                                                                                                                     */ }, { key: 'unlock', value: function () {var _ref13 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee11() {return _regenerator2.default.wrap(function _callee11$(_context11) {while (1) {switch (_context11.prev = _context11.next) {case 0:_context11.next = 2;return (

                  this.__sendTx(
                  this.params.contract.getContract().methods.unlock()));case 2:return _context11.abrupt('return', _context11.sent);case 3:case 'end':return _context11.stop();}}}, _callee11, this);}));function unlock() {return _ref13.apply(this, arguments);}return unlock;}()



    /**
                                                                                                                                                                                                                                                                                    * Create Network
                                                                                                                                                                                                                                                                                    * @param {Object} params
                                                                                                                                                                                                                                                                                    * @param {Address} params.settlerToken
                                                                                                                                                                                                                                                                                    * @param {Address} params.transactionalToken
                                                                                                                                                                                                                                                                                    * @return {Promise<TransactionObject>}
                                                                                                                                                                                                                                                                                    */ }, { key: 'createNetwork', value: function () {var _ref14 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee12(_ref15) {var
        settlerToken = _ref15.settlerToken,transactionalToken = _ref15.transactionalToken;return _regenerator2.default.wrap(function _callee12$(_context12) {while (1) {switch (_context12.prev = _context12.next) {case 0:_context12.next = 2;return (
                  this.__sendTx(
                  this.params.contract.
                  getContract().
                  methods.createNetwork(settlerToken, transactionalToken)));case 2:return _context12.abrupt('return', _context12.sent);case 3:case 'end':return _context12.stop();}}}, _callee12, this);}));function createNetwork(_x6) {return _ref14.apply(this, arguments);}return createNetwork;}()



    /**
                                                                                                                                                                                                                                                                                                         * Deploys Contracts
                                                                                                                                                                                                                                                                                                         * @function
                                                                                                                                                                                                                                                                                                         * @param {Object} params
                                                                                                                                                                                                                                                                                                         * @param {string} params.beproAddress
                                                                                                                                                                                                                                                                                                         * @param {function():void} params.callback
                                                                                                                                                                                                                                                                                                         * @return {Promise<*|undefined>}
                                                                                                                                                                                                                                                                                                         */











    /**
                                                                                                                                                                                                                                                                                                             * @function
                                                                                                                                                                                                                                                                                                             * @return ERC20Contract|null
                                                                                                                                                                                                                                                                                                             */ }]);return Network;}(_IContract3.default);var _initialiseProps = function _initialiseProps() {var _this2 = this;this.__assert = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee13() {var beproAddress;return _regenerator2.default.wrap(function _callee13$(_context13) {while (1) {switch (_context13.prev = _context13.next) {case 0:if (_this2.getAddress()) {_context13.next = 2;break;}throw new Error('Contract is not deployed, first deploy it and provide a contract address');case 2: // Use ABI
            _this2.params.contract.use(_interfaces.networkFactory, _this2.getAddress());_context13.next = 5;return _this2.getSettlerTokenAddress();case 5:beproAddress = _context13.sent; // Set Token Address Contract for easy access
            _this2.params.settlerToken = new _ERC20Contract2.default({ web3Connection: _this2.web3Connection, contractAddress: beproAddress }); // Assert Token Contract
            _context13.next = 9;return _this2.params.settlerToken.login();case 9:_context13.next = 11;return _this2.params.settlerToken.__assert();case 11:case 'end':return _context13.stop();}}}, _callee13, _this2);}));this.approveSettlerERC20Token = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee14() {var totalMaxAmount;return _regenerator2.default.wrap(function _callee14$(_context14) {while (1) {switch (_context14.prev = _context14.next) {case 0:_context14.next = 2;return _this2.getSettlerTokenContract().totalSupply();case 2:totalMaxAmount = _context14.sent;_context14.next = 5;return _this2.getSettlerTokenContract().approve({ address: _this2.getAddress(), amount: totalMaxAmount });case 5:return _context14.abrupt('return', _context14.sent);case 6:case 'end':return _context14.stop();}}}, _callee14, _this2);}));this.isApprovedSettlerToken = function () {var _ref18 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee15(_ref19) {var amount = _ref19.amount,address = _ref19.address;return _regenerator2.default.wrap(function _callee15$(_context15) {while (1) {switch (_context15.prev = _context15.next) {case 0:_context15.next = 2;return _this2.getSettlerTokenContract().isApproved({ address: address, amount: amount, spenderAddress: _this2.getAddress() });case 2:return _context15.abrupt('return', _context15.sent);case 3:case 'end':return _context15.stop();}}}, _callee15, _this2);}));return function (_x7) {return _ref18.apply(this, arguments);};}();this.deploy = function () {var _ref20 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee16(_ref21) {var beproAddress = _ref21.beproAddress,callback = _ref21.callback;var params, res;return _regenerator2.default.wrap(function _callee16$(_context16) {while (1) {switch (_context16.prev = _context16.next) {case 0:params = [beproAddress];_context16.next = 3;return _this2.__deploy(params, callback);case 3:res = _context16.sent;_this2.params.contractAddress = res.contractAddress; /* Call to Backend API */_context16.next = 7;return _this2.__assert();case 7:return _context16.abrupt('return', res);case 8:case 'end':return _context16.stop();}}}, _callee16, _this2);}));return function (_x8) {return _ref20.apply(this, arguments);};}();this.getSettlerTokenContract = function () {return _this2.params.settlerToken;};};exports.default =
Network;